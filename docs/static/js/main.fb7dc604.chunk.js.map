{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAKaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAGZC,mBAAS,IAHG,mBAGzCC,EAHyC,KAG7BC,EAH6B,KAqBhD,OACI,0BAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,OAOd,4BAAKD,GACL,2BACAQ,KAAK,OACLC,MAAUT,EACVU,SArBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCXdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0FAC4EF,EAD5E,gDAEAG,MAAOD,GAFP,cAEbE,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAGD,EAAIC,GACPC,MAAOF,EAAIE,MACXT,IAAG,UAAEO,EAAIG,cAAN,aAAE,EAAYC,iBAAiBX,QATvB,kBAYbK,GAZa,4CAAH,sDCCXO,EAAc,SAAC,GAAa,IAAXL,EAAU,EAAVA,IAG1B,OACI,yBAAKM,UAAU,2CACX,yBAAKC,IAAKP,EAAIP,IAAKe,IAAKR,EAAIE,QAC5B,2BAAIF,EAAIE,SCFPO,EAAU,SAAC,GAAoB,IAAjBlB,EAAgB,EAAhBA,SAAgB,ECHf,SAAEA,GAAe,IAAD,EACfd,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAH4B,mBAClCC,EADkC,KAC3BC,EAD2B,KAqBzC,OAfAC,qBAAW,WACVvB,EAASC,GACRuB,MAAM,SAAAC,GAEHC,YAAY,WAGRJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,UAEL,CAACnB,IAEGoB,EDd0BM,CAAc1B,GAAjCY,EAJ0B,EAI/BN,KAAYa,EAJmB,EAInBA,QAEpB,OACI,oCACI,wBAAIJ,UAAU,qCAAsCf,EAApD,KACEmB,GAAW,uBAAGJ,UAAU,qCAAb,WACjB,yBAAKA,UAAU,aAGHH,EAAOJ,KAAK,SAAAC,GAAG,OACZ,kBAAC,EAAD,CACAkB,IAAKlB,EAAIC,GACTD,IAAMA,UEjBhBmB,EAAe,WAAM,MAIM1C,mBAAS,CAAC,WAJhB,mBAIvB2C,EAJuB,KAIX5C,EAJW,KAa9B,OACI,oCACI,4CACA,6BAEA,kBAAC,EAAD,CAAaA,cAAgBA,IAE7B,4BAEQ4C,EAAWrB,KAAK,SAAAR,GAAQ,OACpB,kBAAC,EAAD,CACA2B,IAAK3B,EACLA,SAAWA,U,MCzBnC8B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.fb7dc604.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n// SetCategories recibimos el prop desde el padre GifExperteApp\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    // Para poder escribir en el input usamos useState\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    // Para a単adir con enter \r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);      \r\n    }\r\n\r\n    // Para agregar a la lista o en el array\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); //con el envio no se recarge\r\n        // console.log( {'Submit hecho'} );\r\n        if (inputValue.trim().length > 2) {            \r\n            setCategories( cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <h1>{inputValue}</h1>\r\n            <input\r\n            type=\"text\"\r\n            value = { inputValue }\r\n            onChange = { handleInputChange}\r\n            />            \r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n// Para que utilice el componente con la funcion que se necesita\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","   // Obtener las imagenes con fech\r\n    export const getGifs = async( category )  =>{\r\n        const url = `https://api.giphy.com/v1/gifs/search?api_key=fvds0FidlulyF0AHSYe108wmbeVsseZQ&q=${category}&limit=10&offset=0&rating=g&lang=en`;\r\n        const resp = await fetch( url );\r\n        const { data } = await resp.json(); //desestructuramos para no usar data.data\r\n        // console.log(data);\r\n        const gifs = data.map( img => {\r\n            return{\r\n                id:img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url,\r\n            }\r\n        })\r\n       return gifs;\r\n    }","import React from 'react'\r\n\r\nexport const GifGridItem = ({ img }) => { //recibimos img como props dessustrurando del componente padre GifGrid\r\n    // console.log(img);\r\n\r\n    return (\r\n        <div className=\"card, animate__animated animate__bounce\">\r\n            <img src={img.url} alt={img.title} />\r\n            <p>{img.title}</p>\r\n        </div>\r\n    )\r\n}\r\n","// import React, { useState, useEffect } from 'react'\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ( { category } ) => { //recibimos los props entre llaves desde el padre\r\n\r\n       \r\n    // usaremos el custom HOOK\r\n    const { data:images,loading } = useFetchGifs( category );\r\n      \r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__bounce\">{ category } </h3>\r\n            { loading && <p className=\"animate__animated animate__bounce\">Loading</p> }\r\n        <div className=\"card-grid\">\r\n            \r\n                { \r\n                    images.map( img => (\r\n                       <GifGridItem \r\n                       key={img.id}\r\n                       img={ img }/>              \r\n                    ))\r\n                }\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n   const [state, setState] = useState({\r\n       data: [],\r\n       loading: true\r\n   });\r\n\r\n   useEffect( () => {\r\n    getGifs( category )\r\n    .then( imgs => {\r\n\r\n        setTimeout( () => {\r\n\r\n            // dispara una rnderizacion en el componenete GifFrid\r\n            setState({\r\n                data: imgs,\r\n                loading: false \r\n            })\r\n        }, 3000);\r\n    });  \r\n   }, [category])\r\n\r\n   return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory }  from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n    // const categories = ['One punch', 'Samurai X', 'Dragon Ball', 'One Piece']\r\n\r\n    // useState es un Hook que te permite a単adir el estado de React a un componente funcional\r\n    const [categories, setCategories] = useState(['naruto']);\r\n\r\n    // Para a単adir el elementro al arreglo con setCategories de useState\r\n    // const handleAdd = () =>{\r\n    //     setCategories([...categories, 'Hunter X Hunter']); //a単adir una nueva\r\n    //  // setCategories(...cats =>[ ...cats, 'Hunter X Hunter']); //con callback con el estado anterior y el nuevo estado\r\n    // }\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <hr/>\r\n            {/* agregamos la neuva categoria al arreglo */}\r\n            <AddCategory setCategories={ setCategories }/>\r\n            {/* <button onClick={ handleAdd }>Agregar</button> */} \r\n            <ol>\r\n                { \r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                        key={category}\r\n                        category={ category}/>\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}